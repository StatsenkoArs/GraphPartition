using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GraphPartitionAccurate;
using GraphRepresentation;

namespace TestsForAlgorithm.GraphPartitionAccurateTest
{
    [TestClass]
    public class AccurateTests
    {
        private TestContext testContext;

        public TestContext TestContext
        {
            get { return testContext; }
            set { testContext = value; }
        }


        [TestMethod]
        public void Test9Vert()
        {
            int[][] graphArray = { [1, 3],
                                [0, 2, 3, 4],
                                [1, 4, 5],
                                [0, 1, 4, 6],
                                [1, 2, 3, 5, 6, 7],
                                [2, 4, 7, 8],
                                [3, 4, 7],
                                [4, 5, 6, 8],
                                [5, 7] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        [TestMethod]
        public void Test10Vert()
        {
            int[][] graphArray = { [ 3,  5,  6,  7 ],
                            [ 3,  4,  5,  7,  8,  9 ],
                            [ 4,  6,  9 ],
                            [ 0,  1,  4,  5 ],
                            [ 1,  2,  3,  5,  8 ],
                            [ 0,  1,  3,  4,  6,  8 ],
                            [ 0,  2,  5,  7 ],
                            [ 0,  1,  6 ],
                            [ 1,  4,  5 ],
                            [ 1,  2 ] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
        }

        [TestMethod]
        public void Test10Vert2()
        {
            int[][] graphArray = { [ 1,  3,  4],
                                [ 0,  2,  4],
                                [ 1,  4,  5],
                                [ 0,  4,  6],
                                [ 0,  1,  2,  3,  5,  6,  7,  8],
                                [ 2,  4,  8],
                                [ 3,  4,  7],
                                [ 4,  6,  8],
                                [ 4,  5,  7],
                                [ 6,  7] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        [TestMethod]
        public void Test10Vert3()
        {
            int[][] graphArray = { [ 1,  3,  4],
                                [ 0,  2,  4],
                                [ 1,  4,  5],
                                [ 0,  4,  6],
                                [ 0,  1,  2,  3,  5,  6,  7,  8],
                                [ 2,  4,  8],
                                [ 3,  4,  7, 9],
                                [ 4,  6,  8, 9],
                                [ 4,  5,  7],
                                [ 6,  7] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        [TestMethod]
        public void Test15Vert()
        {
            int[][] graphArray = { [ 8,  9,  13 ],
                                [ 4,  10 ],
                                [ 3,  7,  11,  12 ],
                                [ 2,  5,  6 ],
                                [ 1,  7,  8,  9,  10,  11 ],
                                [ 3,  8,  10,  14 ],
                                [ 3,  8,  11,  13,  14 ],
                                [ 2,  4,  11 ],
                                [ 0,  4,  5,  6,  12 ],
                                [ 0,  4,  11,  13,  14 ],
                                [ 1,  4,  5,  11,  13 ],
                                [ 2,  4,  6,  7,  9,  10 ],
                                [ 2,  8 ],
                                [ 0,  6,  9,  10 ],
                                [ 5,  6,  9 ] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        [TestMethod]
        public void Test85Vert()
        {
            int[][] graphArray = { [1, 9, 10],
                                [0, 2, 10, 11],
                                [1, 3, 11],
                                [2, 4, 11, 12, 13],
                                [3, 5, 13, 14],
                                [4, 6, 14],
                                [5, 7, 14, 15, 16],
                                [6, 8, 16, 17],
                                [7, 17],
                                [0, 10, 18],
                                [0, 1, 9, 11, 18, 19],
                                [1, 2, 3, 10, 12, 19, 20, 21],
                                [3, 11, 13, 21],
                                [3, 4, 12, 14, 21, 22],
                                [4, 5, 6, 13, 15, 22, 23],
                                [6, 14, 16, 23, 24],
                                [6, 7, 15, 17, 24, 25],
                                [7, 8, 16, 25, 26],
                                [9, 10, 19, 27],
                                [10, 11, 18, 20, 27, 28],
                                [11, 19, 21, 28, 29],
                                [11, 12, 13, 20, 22, 29, 30],
                                [13, 14, 21, 23, 30, 31],
                                [14, 15, 22, 24, 31, 32],
                                [15, 16, 23, 25, 32, 33],
                                [16, 17, 24, 26, 33, 34, 35],
                                [17, 25, 35],
                                [18, 19, 28, 36],
                                [19, 20, 27, 29, 36, 37, 38],
                                [20, 21, 28, 30, 38],
                                [21, 22, 29, 31, 38, 39],
                                [22, 23, 30, 32, 39, 40],
                                [23, 24, 31, 33, 40, 41],
                                [24, 25, 32, 34, 41, 42],
                                [25, 33, 35, 42, 43],
                                [25, 26, 34, 43, 44],
                                [27, 28, 37, 45],
                                [28, 36, 38, 45, 46, 47],
                                [28, 29, 30, 37, 39, 47, 48],
                                [30, 31, 38, 40, 48],
                                [31, 32, 39, 41, 48, 49],
                                [32, 33, 40, 42, 49, 50, 51],
                                [33, 34, 41, 43, 51],
                                [34, 35, 42, 44, 51, 52],
                                [35, 43, 52, 53],
                                [36, 37, 46, 54, 55],
                                [37, 45, 47, 55],
                                [37, 38, 46, 48, 55, 56],
                                [38, 39, 40, 47, 49, 56, 57],
                                [40, 41, 48, 50, 57, 58],
                                [41, 49, 51, 58, 59],
                                [41, 42, 43, 50, 52, 59, 60, 61],
                                [43, 44, 51, 53, 61],
                                [44, 52, 61, 62],
                                [45, 55, 63],
                                [45, 46, 47, 54, 56, 63, 64],
                                [47, 48, 55, 57, 64, 65, 66],
                                [48, 49, 56, 58, 66],
                                [49, 50, 57, 59, 66, 67],
                                [50, 51, 58, 60, 67, 68, 69],
                                [51, 59, 61, 69, 70],
                                [51, 52, 53, 60, 62, 70, 71],
                                [53, 61, 71],
                                [54, 55, 64, 72],
                                [55, 56, 63, 65, 72, 73],
                                [56, 64, 66, 73, 74, 75],
                                [56, 57, 58, 65, 67, 75],
                                [58, 59, 66, 68, 75, 76, 77],
                                [59, 67, 69, 77],
                                [59, 60, 68, 70, 77, 78],
                                [60, 61, 69, 71, 78, 79],
                                [61, 62, 70, 79, 80],
                                [63, 64, 73, 81, 82],
                                [64, 65, 72, 74, 82, 83],
                                [65, 73, 75, 83],
                                [65, 66, 67, 74, 76, 83, 84],
                                [67, 75, 77, 84],
                                [67, 68, 69, 76, 78],
                                [69, 70, 77, 79],
                                [70, 71, 78, 80],
                                [71, 79],
                                [72, 82],
                                [72, 73, 81, 83],
                                [73, 74, 75, 82, 84],
                                [75, 76, 83] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        [TestMethod]

        public void Test100VertRenum()
        {
            int[][] graphArray = {  [1],
                                    [0, 2],
                                    [1, 3],
                                    [4, 2],
                                    [5, 6, 7, 3, 8],
                                    [4, 9],
                                    [10, 4, 11],
                                    [12, 4],
                                    [4, 13, 14],
                                    [5],
                                    [15, 6, 16, 17, 18, 19],
                                    [6],
                                    [20, 7],
                                    [21, 22, 8, 19],
                                    [23, 8],
                                    [10, 24, 25, 26, 27, 28],
                                    [10, 25, 29],
                                    [10, 30, 31],
                                    [10],
                                    [10, 13, 32, 31],
                                    [12, 33],
                                    [34, 13],
                                    [25, 35, 13, 36],
                                    [37, 14],
                                    [15, 38],
                                    [15, 16, 22, 39],
                                    [15, 40, 41, 42, 43, 44],
                                    [15, 46, 45],
                                    [15, 47, 48],
                                    [16, 49, 50],
                                    [51, 42, 17, 52, 53],
                                    [54, 17, 55, 19],
                                    [56, 19],
                                    [20, 38],
                                    [58, 57, 21],
                                    [51, 59, 22],
                                    [60, 22, 61],
                                    [23],
                                    [24, 33],
                                    [49, 25, 62],
                                    [44, 63, 26],
                                    [26, 62],
                                    [30, 26],
                                    [57, 26],
                                    [40, 64, 26],
                                    [46, 65, 66, 27],
                                    [45, 27],
                                    [28],
                                    [28],
                                    [29, 39],
                                    [54, 29],
                                    [67, 35, 30],
                                    [30],
                                    [30],
                                    [50, 68, 31],
                                    [31],
                                    [59, 69, 32],
                                    [60, 43, 34, 70],
                                    [34, 71],
                                    [56, 35],
                                    [57, 36],
                                    [72, 36],
                                    [41, 39],
                                    [40],
                                    [73, 44],
                                    [74, 45],
                                    [76, 45, 75],
                                    [51],
                                    [54],
                                    [56, 75],
                                    [57],
                                    [58],
                                    [61],
                                    [64],
                                    [65, 77, 78, 79],
                                    [80, 69, 66],
                                    [66],
                                    [74],
                                    [74],
                                    [74],
                                    [75],
                                    [],
                                    [],
                                    [],
                                    [],
                                    [],
                                    [],
                                    [],
                                    [],
                                    [90],
                                    [89, 91],
                                    [90],
                                    [],
                                    [],
                                    [95],
                                    [94],
                                    [] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
            TestContext.WriteLine("x = [" + string.Join(", ", ap.GetSolution().Item1) + "]");
            TestContext.WriteLine("q = " + ap.GetSolution().Item2);
        }

        //[TestMethod]
        public void Test100Vert()
        {
            int[][] graphArray = { [],
                                [34, 86],
                                [36, 44, 55],
                                [58],
                                [42, 92],
                                [46, 48, 89],
                                [22, 27, 40, 65, 84, 87],
                                [22, 34, 66],
                                [21, 35, 42, 81],
                                [],
                                [],
                                [38, 53, 65],
                                [95],
                                [22, 40, 62],
                                [],
                                [41, 74],
                                [17, 47],
                                [16, 77],
                                [],
                                [65, 96],
                                [62, 79],
                                [8, 88],
                                [6, 7, 13, 33, 67, 98],
                                [],
                                [28, 38],
                                [76, 91],
                                [63, 73, 90],
                                [6, 30],
                                [24],
                                [99],
                                [27, 77],
                                [71, 84],
                                [55, 65],
                                [22, 55, 90],
                                [1, 7, 47, 93, 94],
                                [8, 65],
                                [2],
                                [55],
                                [11, 24, 65],
                                [],
                                [6, 13, 68, 79],
                                [15],
                                [4, 8, 60],
                                [70],
                                [2, 46, 68],
                                [49, 71],
                                [5, 44],
                                [16, 34],
                                [5, 99],
                                [45, 50, 51, 97],
                                [49],
                                [49],
                                [60, 68, 94, 98],
                                [11],
                                [],
                                [2, 32, 33, 37, 80],
                                [61],
                                [87],
                                [3, 71, 99],
                                [],
                                [42, 52],
                                [56],
                                [13, 20, 63],
                                [26, 62],
                                [],
                                [6, 11, 19, 32, 35, 38],
                                [7],
                                [22],
                                [40, 44, 52, 88],
                                [70, 94],
                                [43, 69],
                                [31, 45, 58, 84],
                                [],
                                [26],
                                [15, 93],
                                [],
                                [25],
                                [17, 30],
                                [],
                                [20, 40, 96],
                                [55],
                                [8],
                                [],
                                [87],
                                [6, 31, 71],
                                [90],
                                [1],
                                [6, 57, 83],
                                [21, 68, 95],
                                [5, 98],
                                [26, 33, 85, 98],
                                [25],
                                [4],
                                [34, 74],
                                [34, 52, 69],
                                [12, 88],
                                [19, 79],
                                [49],
                                [22, 52, 89, 90],
                                [29, 48, 58] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
        }

        //[TestMethod]
        public void Test101Vert()
        {
            int[][] graphArray = { [1],
                                [0, 2, 12],
                                [1, 14],
                                [4, 14, 15],
                                [3, 5, 15, 16],
                                [4, 6, 16, 17],
                                [5, 7, 17, 18],
                                [6, 8, 19],
                                [7, 20],
                                [10, 20],
                                [9, 20],
                                [22],
                                [1, 22],
                                [14, 22],
                                [2, 3, 13],
                                [3, 4, 24],
                                [4, 5, 24, 25],
                                [5, 6, 25, 26],
                                [6, 19],
                                [7, 18, 20, 27, 28],
                                [8, 9, 10, 19, 28, 29],
                                [22, 31],
                                [11, 12, 13, 21, 32, 33],
                                [24, 33],
                                [15, 16, 23, 34],
                                [16, 17, 35, 36, 37],
                                [17, 37, 38],
                                [19, 38, 39],
                                [19, 20, 29, 39],
                                [20, 28, 30, 39],
                                [29, 40],
                                [21, 32, 41, 42],
                                [22, 31],
                                [22, 23, 34, 43],
                                [24, 33, 35, 44],
                                [25, 34, 36, 45, 46],
                                [25, 35, 37],
                                [25, 26, 36, 47, 55],
                                [26, 27, 39, 47],
                                [27, 28, 29, 38, 40, 47],
                                [30, 39, 48, 50],
                                [31, 52],
                                [31, 43],
                                [33, 42, 44, 52, 53],
                                [34, 43, 45],
                                [35, 44, 53],
                                [35, 54, 55],
                                [37, 38, 39, 48, 56, 57],
                                [40, 47, 49, 57],
                                [48, 50, 58, 59, 60],
                                [40, 49],
                                [52, 61],
                                [41, 43, 51, 62],
                                [43, 45, 54, 63, 64],
                                [46, 53, 55, 64, 65],
                                [37, 46, 54, 56],
                                [47, 55, 65, 68],
                                [47, 48, 58],
                                [49, 57, 59, 69],
                                [49, 58, 70],
                                [49, 70],
                                [51],
                                [52, 63, 71],
                                [53, 62, 72],
                                [53, 54, 73, 74],
                                [54, 56, 66, 75],
                                [65, 67],
                                [66, 68],
                                [56, 67, 76, 77, 79],
                                [58],
                                [59, 60, 80],
                                [62, 72, 81],
                                [63, 71, 82, 83],
                                [64, 84],
                                [64, 75, 84, 85],
                                [65, 74, 76],
                                [68, 75, 86],
                                [68, 78],
                                [77, 87, 88],
                                [68, 89],
                                [70, 90],
                                [71, 91],
                                [72, 92],
                                [72, 84],
                                [73, 74, 83, 93, 94],
                                [74, 86, 94],
                                [76, 85, 87, 95, 96],
                                [78, 86],
                                [78, 89, 97],
                                [79, 88],
                                [80, 98, 100],
                                [81],
                                [82, 93],
                                [84, 92],
                                [84, 85],
                                [86, 96],
                                [86, 95],
                                [88, 98],
                                [90, 97],
                                [100],
                                [90, 99] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
        }

        //[TestMethod]
        public void Test151Vert()
        {
            int[][] graphArray = { [1],
                                [0, 2, 12],
                                [1, 14],
                                [4, 14, 15],
                                [3, 5, 15, 16],
                                [4, 6, 16, 17],
                                [5, 7, 17, 18],
                                [6, 8, 19],
                                [7, 20],
                                [10, 20],
                                [9, 20, 102],
                                [22],
                                [1, 22],
                                [14, 22],
                                [2, 3, 13, 23],
                                [3, 4, 24],
                                [4, 5, 24, 25],
                                [5, 6, 25, 26, 27],
                                [6, 19],
                                [7, 18, 20, 27, 28],
                                [8, 9, 10, 19, 28, 29, 102],
                                [22, 31],
                                [11, 12, 13, 21, 32, 33],
                                [14, 24, 33],
                                [15, 16, 23, 34],
                                [16, 17, 35, 36, 37],
                                [17, 37, 38],
                                [17, 19, 38, 39],
                                [19, 20, 29, 39],
                                [20, 28, 30, 39],
                                [29, 40, 50, 102, 104],
                                [21, 32, 41, 42],
                                [22, 31],
                                [22, 23, 34, 43],
                                [24, 33, 35, 44],
                                [25, 34, 36, 45, 46],
                                [25, 35, 37],
                                [25, 26, 36, 47, 55],
                                [26, 27, 39, 47],
                                [27, 28, 29, 38, 40, 47],
                                [30, 39, 48, 50],
                                [31, 52],
                                [31, 43],
                                [33, 42, 44, 52, 53],
                                [34, 43, 45],
                                [35, 44, 53],
                                [35, 54, 55],
                                [37, 38, 39, 48, 56, 57],
                                [40, 47, 49, 57],
                                [48, 50, 58, 59, 60],
                                [30, 40, 49, 104, 105],
                                [52, 61],
                                [41, 43, 51, 62],
                                [43, 45, 54, 63, 64],
                                [46, 53, 55, 64, 65],
                                [37, 46, 54, 56],
                                [47, 55, 65, 68],
                                [47, 48, 58],
                                [49, 57, 59, 69],
                                [49, 58, 70],
                                [49, 70, 105, 106],
                                [51],
                                [52, 63, 71],
                                [53, 62, 72],
                                [53, 54, 73, 74],
                                [54, 56, 66, 75],
                                [65, 67],
                                [66, 68],
                                [56, 67, 76, 77, 79],
                                [58, 70],
                                [59, 60, 69, 80],
                                [62, 72, 81],
                                [63, 71, 73, 82, 83],
                                [64, 72, 84],
                                [64, 75, 84, 85],
                                [65, 74, 76],
                                [68, 75, 86],
                                [68, 78],
                                [77, 87, 88],
                                [68, 80, 89],
                                [70, 79, 90, 106, 107],
                                [71, 91],
                                [72, 83, 92],
                                [72, 82, 84],
                                [73, 74, 83, 93, 94],
                                [74, 86, 94],
                                [76, 85, 87, 95, 96],
                                [78, 86, 96],
                                [78, 89, 97],
                                [79, 88],
                                [80, 98, 100, 108],
                                [81],
                                [82, 93],
                                [84, 92],
                                [84, 85],
                                [86, 96],
                                [86, 87, 95],
                                [88, 98],
                                [90, 97],
                                [100],
                                [90, 99, 109],
                                [102, 111],
                                [10, 20, 30, 101, 103],
                                [102, 104, 112],
                                [30, 50, 103, 113, 114],
                                [50, 60, 106, 114, 115],
                                [60, 80, 105, 107, 115, 116],
                                [80, 106, 117],
                                [90, 109, 117, 118],
                                [100, 108, 110, 118, 120],
                                [109, 120],
                                [101, 112],
                                [103, 111, 113, 122],
                                [104, 112, 114, 123],
                                [104, 105, 113, 115, 124],
                                [105, 106, 114, 116, 125],
                                [106, 115, 117, 126, 127],
                                [107, 108, 116, 127],
                                [108, 109, 128],
                                [128, 129, 130],
                                [109, 110, 130],
                                [122, 132],
                                [112, 121, 123],
                                [113, 122, 132, 133],
                                [114, 125, 133, 135],
                                [115, 124, 126],
                                [116, 125, 127, 135, 136],
                                [116, 117, 126, 136, 137],
                                [118, 119, 137, 139],
                                [119, 130, 139],
                                [119, 120, 129, 139],
                                [132],
                                [121, 123, 131, 141, 142, 143],
                                [123, 124, 143, 144],
                                [144],
                                [124, 126, 145],
                                [126, 127, 137, 145, 146],
                                [127, 128, 136, 138, 147],
                                [137, 139, 149],
                                [128, 129, 130, 138, 140],
                                [139, 149],
                                [132],
                                [132],
                                [132, 133],
                                [133, 134, 145],
                                [135, 136, 144],
                                [136, 147],
                                [137, 146, 148],
                                [147, 149],
                                [138, 140, 148, 150],
                                [149] };
            IGraph graph = new GraphSRC(graphArray);
            IAccuratePartition ap = new BranchAndBoundsAlgorithm();
            int[] x = ap.GetPartition(graph);
            Assert.IsTrue(x.Sum() >= graph.CountVertecies / 2 && x.Sum() <= graph.CountVertecies + 1);
        }
    }
}
